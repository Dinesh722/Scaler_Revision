You are given an integer array A of length N comprising of 0's & 1's, and an integer B.
You have to tell all the indices of array A that can act as a center of 2 * B + 1 length 0-1 alternating subarray.
A 0-1 alternating array is an array containing only 0's & 1's, and having no adjacent 0's or 1's. 
For e.g. arrays [0, 1, 0, 1], [1, 0] and [1] are 0-1 alternating, while [1, 1] and [0, 1, 0, 0, 1] are not.

Input 1:
 A = [1, 0, 1, 0, 1]
 B = 1 
 Output 1:
 [1, 2, 3]
 
Input 2:
 A = [0, 0, 0, 1, 1, 0, 1]
 B = 0 
 Output 2:
 [0, 1, 2, 3, 4, 5, 6]
 
 *************************************
 
 TC = N^2(from TA text request)
 The time complexity of this code is O(N^2) because you're running 2 loops and both are in the range of ~N !
 Though this is a optimal solution because N is in the range of 10^3 so N^2 would be 10^6 and that is enough to pass the cases!
 SC = O(n)
 
 public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A, int B) {
        int n = A.size();
        ArrayList<Integer> ans = new ArrayList<Integer>();
        int len = (2*B)+1;
        for(int i=0;i<n-len+1;i++){
            int flag = 1;
            int curr = -1;
            for(int j=i;j<i+len;j++){
                if(A.get(j)==curr){
                    flag = 0;
                    break;
                }
                curr = A.get(j);
            }
            if(flag==1){
                ans.add(i+B);
            }
        }
        return ans;
    }
}
