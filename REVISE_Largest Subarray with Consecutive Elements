Given an array A of length N, with distinct integers.
Find length of the longest subarray which contains numbers that can be re - arranged in a continuous sequence.
A consecutive sequence of length X denotes a sequence with X elements such that all the adjacent pairs of elements have an absolute difference of 1.

Example Input
Input 1:
A = [10, 12, 11]
Input 2:
A = [1, 56, 58, 57, 90, 92, 94, 93, 91, 45]

Example Output
Output 1:
3
Output 2:
5

**********************************************
Hi, In this approach we are iterating on all possible subarrays in N^2 complexity and tring to find 
whether current subarray is with consecutive elements or not.

Lets take an example
4 5 6 7 8 9

In above array if you see, minimum element is 4 and maxmimum element is 9, so from here you can see, 
if the difference between maximum and minimum is equal to the length of the array than it is array with consecutive elements.

maximum - minimum + 1 == j - i +1

if you remove +1 from both side,
maximum - minimum == j - i

In above i is starting index which is 0 and j is last index which is 5
So, 9-4 == 5-0
5 == 5

Yes above equation is correct which means it is an array with consecutive elements, so we can take maximum with its length, 
which is j-i+1, as we have to return the maximum length.

TC = O(n*n) //it is oki because the constraints are 10^3. Iteration can go upto 10^6 or 10^7
SC = O(1)

public class Solution {
    public int findSubarray(ArrayList<Integer> A) {
        int n = A.size();
        int ans = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            int min = Integer.MAX_VALUE;
            int max = Integer.MIN_VALUE;
            for(int j=i;j<n;j++){
                min = Math.min(min,Math.min(A.get(i),A.get(j)));
                max = Math.max(max,Math.max(A.get(i),A.get(j)));
                if((max-min)==(j-i)){
                    // System.out.println("i="+i);
                    // System.out.println("j="+j);
                    // System.out.println();
                    ans = Math.max(ans,(j-i+1));
                }
            }
        }
        return ans;
    }
}
