***************Ceil and Floor******************
Ceil value = greatest number
  Eg: 4.1 => 5

Floor = smallest number
  Eg: 4.9 => 4
  
***************Maths******************
Arithmetic Progression
  a+(n-1)d //clearly written in revision note book
Sum of N natural Numbers
  n(n+1)/2

***************LCM******************
LCM = (A*B) / GCD(A,B)

*************Contribution technique****************
To get the sum of all sub arrays = (i+1)*(n-i)
public class Solution {
    public Long subarraySum(ArrayList<Integer> A) {
        long sum = 0L;
        long contribution = 0L;
        long s = 0;
        long e = 0;
        long total = 0L;
        int n = A.size();
        for(int i=0;i<n;i++){
            s = (long)(i+1);
            e = (long)(n-i);
            total = s * e;
            contribution = total * (long)A.get(i);
            sum = sum + contribution;
        }
        return (sum);
    }
}

***************Moore's Voting Algorithm**********************
Dinesh   : x x x x x x x
Harshini : x x x x
zzz      : x x x x x x

if two different seats are removed from 2 different people
sure dinesh will have max freq

EG:
3 3 4 6 1 3 2 5 3 3 3
1 => majority ele = 3
      freq = 1
      
2 =>  ele = 3 
      majority ele = 3
      freq = 2
      
3 =>  ele = 4
      majority ele = 3
      freq--
      freq = 1
      
4 =>  ele = 6
      majority ele = 3
      freq--
      freq = 0
    
5 =>  ele = 1
      majority ele = 1
      freq = 1
....
atlas we will get the majority ele whos freq is greater in the array
