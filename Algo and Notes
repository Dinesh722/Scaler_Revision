***************Ceil and Floor******************
Ceil value = greatest number
  Eg: 4.1 => 5

Floor = smallest number
  Eg: 4.9 => 4
  
***************Maths******************
Arithmetic Progression
  a+(n-1)d //clearly written in revision note book
Sum of N natural Numbers
  n(n+1)/2

***************LCM******************
LCM = (A*B) / GCD(A,B)

*************Contribution technique****************
To get the sum of all sub arrays = (i+1)*(n-i)
public class Solution {
    public Long subarraySum(ArrayList<Integer> A) {
        long sum = 0L;
        long contribution = 0L;
        long s = 0;
        long e = 0;
        long total = 0L;
        int n = A.size();
        for(int i=0;i<n;i++){
            s = (long)(i+1);
            e = (long)(n-i);
            total = s * e;
            contribution = total * (long)A.get(i);
            sum = sum + contribution;
        }
        return (sum);
    }
}


for 2d matrix 
(i+1)(j+1)(m-j)(n-i)*ele;

public class Solution {
    public int solve(ArrayList<ArrayList<Integer>> A) {
        int n = A.size();
        int m = A.get(0).size();
        int sum = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                sum = sum + ((i+1)*(j+1)*(m-j)*(n-i)*A.get(i).get(j));
            }
        }
        return sum;
    }
}

***************Moore's Voting Algorithm**********************
Dinesh   : x x x x x x x
Harshini : x x x x
zzz      : x x x x x x

if two different seats are removed from 2 different people
sure dinesh will have max freq

EG:
3 3 4 6 1 3 2 5 3 3 3
1 => majority ele = 3
      freq = 1
      
2 =>  ele = 3 
      majority ele = 3
      freq = 2
      
3 =>  ele = 4
      majority ele = 3
      freq--
      freq = 1
      
4 =>  ele = 6
      majority ele = 3
      freq--
      freq = 0
    
5 =>  ele = 1
      majority ele = 1
      freq = 1
....
atlas we will get the majority ele whos freq is greater in the array

*******************Recursion********************
Assumption: Decide what your function does and assume it does
Main Logic : Solving the original problem with sub-problem
Base Condition :  when should code stop

Preorder : DLR
Inorder : LDR
Postorder : LRD
*************Kadene's algorithm*************
Find the contiguous non-empty subarray within an array, A of length N, with the largest sum.

 A = [1, 2, 3, 4, -10] 
 op = 10
 
 TC = O(n)
 SC = O(1)
 
 public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maxSubArray(final List<Integer> A) {
        int n = A.size();
        int ans = Integer.MIN_VALUE;
        int sum = 0;
        for(int i=0;i<n;i++){
            sum = sum + A.get(i);
            ans = Math.max(ans,sum);
            if(sum<0){
                sum = 0;
            }
        }
        return ans;
    }
}

********************fermats Therorem*************************************
 //this is applied using 
// A^-1 mod B = ( A^(B-2) ) % B

TC = O(logB)
SC = O(1)

 public class Solution {
    public int solve(int A, int B) {
        long p = B-2;
        long x = A;
        long ans = 1;
        while(p>0){
            if((p&1)==1){
                ans = (ans * x) % B;
            }
            p = p>>1;
            x = ((x%B) * (x%B)) %B;
        }
        return (int)ans;
    }
}

**************Euclidean gcd***********
Correct version
gcd(A,B) = gcd(A%B,B)

For code
gcd(A,B) = gcd(B,A%B);
